// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2021 14:21:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg transmit;
reg transmit_data;
// wires                                               
wire received;
wire [3:0] recevA;
wire [3:0] recevB;
wire [3:0] recevC;
wire [3:0] recevD;

// assign statements (if any)                          
RX i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.received(received),
	.recevA(recevA),
	.recevB(recevB),
	.recevC(recevC),
	.recevD(recevD),
	.transmit(transmit),
	.transmit_data(transmit_data)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// transmit
initial
begin
	transmit = 1'b0;
	transmit = #60000 1'b1;
	transmit = #40000 1'b0;
end 

// transmit_data
initial
begin
	transmit_data = 1'b0;
	transmit_data = #20000 1'b1;
	transmit_data = #20000 1'b0;
	transmit_data = #40000 1'b1;
	transmit_data = #20000 1'b0;
	transmit_data = #20000 1'b1;
	transmit_data = #40000 1'b0;
	transmit_data = #40000 1'b1;
	transmit_data = #160000 1'b0;
	transmit_data = #20000 1'b1;
	transmit_data = #40000 1'b0;
	transmit_data = #20000 1'b1;
	transmit_data = #40000 1'b0;
	transmit_data = #60000 1'b1;
	transmit_data = #20000 1'b0;
	transmit_data = #40000 1'b1;
	transmit_data = #20000 1'b0;
	transmit_data = #60000 1'b1;
	transmit_data = #40000 1'b0;
	transmit_data = #40000 1'b1;
	transmit_data = #140000 1'b0;
	transmit_data = #20000 1'b1;
end 
endmodule

