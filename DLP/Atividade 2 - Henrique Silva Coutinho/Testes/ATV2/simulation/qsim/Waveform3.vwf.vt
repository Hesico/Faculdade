// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/16/2021 20:00:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ATVHenrique
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ATVHenrique_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [3:0] C;
reg [3:0] D;
reg clock;
reg clr;
reg ld_A;
reg ld_B;
reg ld_C;
reg ld_D;
reg transmit;
// wires                                               
wire S;

// assign statements (if any)                          
ATVHenrique i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.S(S),
	.clock(clock),
	.clr(clr),
	.ld_A(ld_A),
	.ld_B(ld_B),
	.ld_C(ld_C),
	.ld_D(ld_D),
	.transmit(transmit)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// clr
initial
begin
	clr = 1'b1;
end 

// ld_A
initial
begin
	ld_A = 1'b0;
	ld_A = #40000 1'b1;
	ld_A = #50000 1'b0;
end 

// transmit
initial
begin
	transmit = 1'b0;
	transmit = #110000 1'b1;
	transmit = #20000 1'b0;
end 
endmodule

